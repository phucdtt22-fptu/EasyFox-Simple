'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { OnboardingFormData } from '@/types'

interface OnboardingFormProps {
  onSubmit: (data: OnboardingFormData) => void
  onSkip: () => void
}

export function OnboardingForm({ onSubmit, onSkip }: OnboardingFormProps) {
  const [formData, setFormData] = useState<OnboardingFormData>({
    businessName: '',
    businessType: '',
    businessDescription: '',
    businessLocation: '',
    businessSize: '',
    yearsInBusiness: '',
    mainProducts: '',
    targetCustomers: '',
    businessGoals: ''
  })

  const [currentStep, setCurrentStep] = useState(1)
  const totalSteps = 3

  const handleInputChange = (field: keyof OnboardingFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const validateStep = (step: number): boolean => {
    switch (step) {
      case 1:
        return !!(formData.businessName && formData.businessType)
      case 2:
        return !!(formData.mainProducts && formData.targetCustomers)
      case 3:
        return !!formData.businessGoals
      default:
        return false
    }
  }

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, totalSteps))
    }
  }

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
  }

  const handleSubmit = () => {
    if (validateStep(currentStep)) {
      onSubmit(formData)
    }
  }

  return (
    <div className="bg-white rounded-xl shadow-lg border border-orange-200 max-w-2xl mx-auto">
      {/* Header */}
      <div className="p-6 border-b border-orange-100 bg-gradient-to-r from-orange-50 to-red-50">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-2">
            <span className="text-2xl">ü¶ä</span>
            <h2 className="text-xl font-bold text-gray-800">Thi·∫øt l·∫≠p h·ªì s∆° doanh nghi·ªáp</h2>
          </div>
          <Button 
            variant="ghost" 
            onClick={onSkip}
            className="text-orange-600 hover:text-orange-700 hover:bg-orange-100"
          >
            B·ªè qua
          </Button>
        </div>
        
        {/* Progress Bar */}
        <div className="w-full bg-orange-100 rounded-full h-3 mb-2">
          <div 
            className="bg-gradient-to-r from-orange-500 to-red-500 h-3 rounded-full transition-all duration-500 ease-out"
            style={{ width: `${(currentStep / totalSteps) * 100}%` }}
          />
        </div>
        <p className="text-sm text-orange-600 font-medium">
          B∆∞·ªõc {currentStep} / {totalSteps}
        </p>
      </div>

      {/* Content */}
      <div className="p-6">
        {/* Step 1: Basic Business Info */}
        {currentStep === 1 && (
          <div className="space-y-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">
              Th√¥ng tin c∆° b·∫£n v·ªÅ doanh nghi·ªáp
            </h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√™n doanh nghi·ªáp <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.businessName}
                onChange={(e) => handleInputChange('businessName', e.target.value)}
                placeholder="V√≠ d·ª•: Nail Studio Hoa Mai"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lo·∫°i h√¨nh kinh doanh <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.businessType}
                onChange={(e) => handleInputChange('businessType', e.target.value)}
                placeholder="V√≠ d·ª•: Ti·ªám nail, Spa, Nh√† h√†ng, Caf√©, C·ª≠a h√†ng..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
              />
            </div>

            {/* ƒê√£ b·ªè tr∆∞·ªùng Ng√†nh ngh·ªÅ */}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M√¥ t·∫£ doanh nghi·ªáp
              </label>
              <textarea
                value={formData.businessDescription}
                onChange={(e) => handleInputChange('businessDescription', e.target.value)}
                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ doanh nghi·ªáp c·ªßa b·∫°n..."
                rows={3}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  V·ªã tr√≠
                </label>
                <input
                  type="text"
                  value={formData.businessLocation}
                  onChange={(e) => handleInputChange('businessLocation', e.target.value)}
                  placeholder="V√≠ d·ª•: Qu·∫≠n 1, TP.HCM"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quy m√¥
                </label>
                <input
                  type="text"
                  value={formData.businessSize}
                  onChange={(e) => handleInputChange('businessSize', e.target.value)}
                  placeholder="V√≠ d·ª•: 2-5 nh√¢n vi√™n"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Th·ªùi gian ho·∫°t ƒë·ªông
                </label>
                <input
                  type="text"
                  value={formData.yearsInBusiness}
                  onChange={(e) => handleInputChange('yearsInBusiness', e.target.value)}
                  placeholder="V√≠ d·ª•: 3 nƒÉm"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
                />
              </div>
            </div>
          </div>
        )}

        {/* Step 2: Products & Customers */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">
              S·∫£n ph·∫©m & Kh√°ch h√†ng
            </h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                S·∫£n ph·∫©m/D·ªãch v·ª• ch√≠nh <span className="text-red-500">*</span>
              </label>
              <textarea
                value={formData.mainProducts}
                onChange={(e) => handleInputChange('mainProducts', e.target.value)}
                placeholder="M√¥ t·∫£ c√°c s·∫£n ph·∫©m ho·∫∑c d·ªãch v·ª• ch√≠nh m√† doanh nghi·ªáp c·ªßa b·∫°n cung c·∫•p..."
                rows={4}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng m·ª•c ti√™u <span className="text-red-500">*</span>
              </label>
              <textarea
                value={formData.targetCustomers}
                onChange={(e) => handleInputChange('targetCustomers', e.target.value)}
                placeholder="M√¥ t·∫£ kh√°ch h√†ng m·ª•c ti√™u c·ªßa b·∫°n: ƒë·ªô tu·ªïi, gi·ªõi t√≠nh, s·ªü th√≠ch, nhu c·∫ßu..."
                rows={4}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
              />
            </div>
          </div>
        )}

        {/* Step 3: Goals */}
        {currentStep === 3 && (
          <div className="space-y-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">
              M·ª•c ti√™u kinh doanh
            </h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M·ª•c ti√™u kinh doanh c·ªßa b·∫°n <span className="text-red-500">*</span>
              </label>
              <textarea
                value={formData.businessGoals}
                onChange={(e) => handleInputChange('businessGoals', e.target.value)}
                placeholder="B·∫°n mu·ªën ƒë·∫°t ƒë∆∞·ª£c ƒëi·ªÅu g√¨ v·ªõi doanh nghi·ªáp n√†y? TƒÉng kh√°ch h√†ng, tƒÉng doanh thu, m·ªü r·ªông..."
                rows={4}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
              />
            </div>
          </div>
        )}

        {/* Navigation */}
        <div className="flex justify-between items-center pt-6 mt-6 border-t border-gray-200">
          <Button 
            type="button" 
            variant="outline" 
            onClick={prevStep}
            disabled={currentStep === 1}
            className="border-orange-300 text-orange-600 hover:bg-orange-50"
          >
            ‚Üê Quay l·∫°i
          </Button>
          
          {currentStep < totalSteps ? (
            <Button 
              type="button" 
              onClick={nextStep}
              disabled={!validateStep(currentStep)}
              className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white"
            >
              Ti·∫øp t·ª•c ‚Üí
            </Button>
          ) : (
            <Button 
              type="button" 
              onClick={handleSubmit}
              disabled={!validateStep(currentStep)}
              className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white"
            >
              Ho√†n th√†nh
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}
