'use client';

import { useState, useRef, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Send, Building2 } from 'lucide-react';
import { MarkdownRenderer } from '@/components/ui/markdown-renderer';
import { OnboardingForm } from '@/components/onboarding/OnboardingForm';
import { OnboardingFormData } from '@/types';

interface OnboardingChatProps {
  onComplete: () => void;
}

export default function OnboardingChat({ onComplete }: OnboardingChatProps) {
  const { user } = useAuth();
  const [messages, setMessages] = useState<Array<{
    id: string;
    type: 'ai' | 'user';
    content: string;
    showForm?: boolean;
  }>>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // AI m·ªü l·ªùi ch√†o ƒë·∫ßu ti√™n v√† hi·ªÉn th·ªã form ngay
  useEffect(() => {
    const initialMessage = {
      id: 'welcome',
      type: 'ai' as const,
      content: `üéâ **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EasyFox AI!**

T√¥i l√† tr·ª£ l√Ω marketing AI c·ªßa b·∫°n. ƒê·ªÉ c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t, t√¥i c·∫ßn t√¨m hi·ªÉu th√™m v·ªÅ doanh nghi·ªáp c·ªßa b·∫°n.

Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin trong form b√™n d∆∞·ªõi. Sau khi ho√†n th√†nh, t√¥i s·∫Ω ph√¢n t√≠ch v√† ƒë∆∞a ra nh·ªØng g·ª£i √Ω marketing ph√π h·ª£p nh·∫•t cho doanh nghi·ªáp c·ªßa b·∫°n! ÔøΩ`,
      showForm: true
    };
    
    setMessages([initialMessage]);
    setShowForm(true); // Hi·ªÉn th·ªã form ngay t·ª´ ƒë·∫ßu
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || loading) return;

    const userMessage = {
      id: `user-${Date.now()}`,
      type: 'user' as const,
      content: input.trim()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      // Ph√¢n t√≠ch intent c·ªßa user
      const userInput = input.trim().toLowerCase();
      
      if (userInput.includes('form') || userInput.includes('ƒëi·ªÅn') || userInput.includes('nhanh')) {
        // User mu·ªën d√πng form
        const aiResponse = {
          id: `ai-${Date.now()}`,
          type: 'ai' as const,
          content: `‚úÖ **Tuy·ªát v·ªùi!** T√¥i s·∫Ω ƒë∆∞a ra form onboarding ƒë·ªÉ b·∫°n ƒëi·ªÅn th√¥ng tin nhanh ch√≥ng.

Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin trong form b√™n d∆∞·ªõi. Sau khi ho√†n th√†nh, t√¥i s·∫Ω ph√¢n t√≠ch v√† ƒë∆∞a ra nh·ªØng g·ª£i √Ω marketing ph√π h·ª£p nh·∫•t cho doanh nghi·ªáp c·ªßa b·∫°n! üöÄ`,
          showForm: true
        };
        
        setMessages(prev => [...prev, aiResponse]);
        setShowForm(true);
      } else {
        // User mu·ªën chat t·ª± do - g·ª≠i ƒë·∫øn AI backend
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            question: input.trim(),
            user_id: user?.id,
            user_info: {
              id: user?.id,
              email: user?.email,
              name: user?.user_metadata?.name || user?.email || 'User'
            },
            onboarding_mode: true // ƒê√°nh d·∫•u ƒë√¢y l√† mode onboarding
          })
        });

        if (!response.ok) {
          throw new Error('Failed to get AI response');
        }

        const data = await response.json();
        
        if (data.success) {
          const aiResponse = {
            id: `ai-${Date.now()}`,
            type: 'ai' as const,
            content: data.response,
            showForm: data.response.includes('show_onboarding_form') || 
                     (data.toolInvocations && data.toolInvocations.some((t: { toolName: string }) => t.toolName === 'Show_Onboarding_Form'))
          };
          
          setMessages(prev => [...prev, aiResponse]);
          
          if (aiResponse.showForm) {
            setShowForm(true);
          }
        }
      }
    } catch (error) {
      console.error('Error:', error);
      const errorMessage = {
        id: `ai-error-${Date.now()}`,
        type: 'ai' as const,
        content: '‚ùå Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c s·ª≠ d·ª•ng form onboarding b√™n d∆∞·ªõi.'
      };
      setMessages(prev => [...prev, errorMessage]);
      setShowForm(true);
    } finally {
      setLoading(false);
    }
  };

  const handleOnboardingComplete = async (data: OnboardingFormData) => {
    // T·∫°o business description t·ª´ form data
    const businessDescription = `T√™n doanh nghi·ªáp: ${data.businessName}. Lo·∫°i h√¨nh: ${data.businessType}. M√¥ t·∫£: ${data.businessDescription}. ƒê·ªãa ƒëi·ªÉm: ${data.businessLocation}. Quy m√¥: ${data.businessSize}. S·ªë nƒÉm ho·∫°t ƒë·ªông: ${data.yearsInBusiness}. S·∫£n ph·∫©m/d·ªãch v·ª• ch√≠nh: ${data.mainProducts}. Kh√°ch h√†ng m·ª•c ti√™u: ${data.targetCustomers}. M·ª•c ti√™u kinh doanh: ${data.businessGoals}.`;

    try {
      // G·ª≠i d·ªØ li·ªáu ƒë·∫øn backend
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: `[ONBOARDING_COMPLETE] T√¥i ƒë√£ ho√†n th√†nh form onboarding v·ªõi th√¥ng tin: ${businessDescription}`,
          user_id: user?.id,
          user_info: {
            id: user?.id,
            email: user?.email,
            name: user?.user_metadata?.name || user?.email || 'User'
          },
          onboarding_mode: true
        })
      });

      if (!response.ok) {
        throw new Error('Failed to submit onboarding data');
      }

      const result = await response.json();
      
      if (result.success) {
        // ·∫®n form
        setShowForm(false);
        
        // Hi·ªÉn th·ªã tin nh·∫Øn ho√†n th√†nh
        const completionMessage = {
          id: `completion-${Date.now()}`,
          type: 'ai' as const,
          content: `üéâ **Tuy·ªát v·ªùi! Onboarding ho√†n th√†nh!**

T√¥i ƒë√£ ghi nh·∫≠n ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ doanh nghi·ªáp c·ªßa b·∫°n. T·ª´ gi·ªù, t√¥i s·∫Ω s·ª≠ d·ª•ng nh·ªØng th√¥ng tin n√†y ƒë·ªÉ:

‚úÖ ƒê∆∞a ra chi·∫øn l∆∞·ª£c marketing ph√π h·ª£p
‚úÖ T·∫°o n·ªôi dung s√°ng t·∫°o v√† hi·ªáu qu·∫£  
‚úÖ Qu·∫£n l√Ω chi·∫øn d·ªãch m·ªôt c√°ch t·ªëi ∆∞u
‚úÖ H·ªó tr·ª£ ph√¢n t√≠ch v√† t·ªëi ∆∞u h√≥a

**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EasyFox! H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh marketing th√†nh c√¥ng!** üöÄ

*ƒêang chuy·ªÉn ƒë·∫øn giao di·ªán chat ch√≠nh...*`
        };
        
        setMessages(prev => [...prev, completionMessage]);
        
        // Ch·ªù 3 gi√¢y r·ªìi chuy·ªÉn v·ªÅ chat ch√≠nh
        setTimeout(() => {
          onComplete();
        }, 3000);
      } else {
        throw new Error(result.error || 'Failed to process onboarding data');
      }
    } catch (error) {
      console.error('Error submitting onboarding:', error);
      
      // Hi·ªÉn th·ªã l·ªói
      const errorMessage = {
        id: `error-${Date.now()}`,
        type: 'ai' as const,
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.'
      };
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const handleOnboardingSkip = () => {
    // N·∫øu user b·ªè qua, v·∫´n chuy·ªÉn v·ªÅ chat ch√≠nh
    onComplete();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50">
      {/* Onboarding Header */}
      <div className="bg-white border-b border-blue-200 px-4 py-3">
        <div className="flex items-center justify-center max-w-4xl mx-auto">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-full flex items-center justify-center">
              <Building2 className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-blue-600">EasyFox Onboarding</h1>
              <p className="text-sm text-gray-500">Thi·∫øt l·∫≠p th√¥ng tin doanh nghi·ªáp</p>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Container */}
      <div className="max-w-4xl mx-auto p-4 flex flex-col h-[calc(100vh-80px)]">
        {/* Messages */}
        <div className="flex-1 overflow-y-auto space-y-4 mb-4">
          {messages.map((msg) => (
            <div key={msg.id} className="space-y-2 mb-4">
              {msg.type === 'user' ? (
                <div className="flex justify-end mb-2">
                  <div className="bg-blue-500 text-white rounded-lg px-4 py-2 max-w-xs lg:max-w-md shadow-md">
                    <p className="whitespace-pre-wrap text-sm font-medium">{msg.content}</p>
                  </div>
                </div>
              ) : (
                <div className="flex justify-start mb-2">
                  <div className="bg-white rounded-lg px-4 py-2 max-w-2xl border border-gray-200 shadow-sm">
                    <div className="text-gray-800">
                      <MarkdownRenderer content={msg.content} />
                    </div>
                    
                    {/* Render onboarding form n·∫øu c·∫ßn */}
                    {msg.showForm && showForm && (
                      <div className="mt-4">
                        <OnboardingForm 
                          onSubmit={handleOnboardingComplete}
                          onSkip={handleOnboardingSkip}
                        />
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          ))}
          
          {/* Loading indicator */}
          {loading && (
            <div className="flex justify-start">
              <div className="bg-gray-100 rounded-lg px-4 py-2">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  <span className="text-sm text-gray-500">ƒêang suy nghƒ©...</span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input Form - ·∫©n n·∫øu ƒëang hi·ªÉn th·ªã form */}
        {!showForm && (
          <form onSubmit={handleSubmit} className="bg-white rounded-lg border border-gray-200 shadow-sm">
            <div className="flex items-end gap-2 p-3">
              <Textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Chia s·∫ª v·ªÅ doanh nghi·ªáp c·ªßa b·∫°n ho·∫∑c g√µ 'form' ƒë·ªÉ ƒëi·ªÅn form nhanh..."
                className="flex-1 min-h-[60px] max-h-32 resize-none border-0 focus:ring-0 focus:outline-none"
                disabled={loading}
              />
              <Button
                type="submit"
                disabled={!input.trim() || loading}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}
