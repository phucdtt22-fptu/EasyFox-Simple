'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/context/AuthContext'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function RegisterForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [name, setName] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)
  const { signUp } = useAuth()
  const router = useRouter()

  // Debug log ƒë·ªÉ theo d√µi success state
  console.log('RegisterForm render - success state:', success)

  // Auto redirect sau 5 gi√¢y n·∫øu signup th√†nh c√¥ng
  useEffect(() => {
    if (success) {
      const timer = setTimeout(() => {
        console.log('Auto redirecting to home after successful signup')
        router.push('/')
      }, 5000)
      
      return () => clearTimeout(timer)
    }
  }, [success, router])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      console.log('Starting signup process for:', email)
      const { data, error } = await signUp(email, password, name)
      
      console.log('Signup response:', { data, error })
      
      if (error) {
        console.error('Signup error:', error)
        setError(error.message)
        setLoading(false)
      } else {
        console.log('Signup successful, setting success state')
        setLoading(false)
        // Force a small delay to ensure state update
        setTimeout(() => {
          console.log('Setting success state now')
          setSuccess(true)
        }, 100)
      }
    } catch (err) {
      console.error('Unexpected signup error:', err)
      setError('ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i.')
      setLoading(false)
    }
  }

  if (success) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-red-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <div className="mx-auto h-16 w-auto flex items-center justify-center">
              <span className="text-4xl font-bold">
                <span className="text-orange-500">Easy</span>
                <span className="text-red-600">Fox</span>
              </span>
            </div>
            <div className="text-green-500 text-6xl mb-4 mt-6">‚úÖ</div>
            <h2 className="text-3xl font-extrabold text-gray-900">
              ƒêƒÉng k√Ω th√†nh c√¥ng!
            </h2>
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mt-4 mb-4">
              <p className="text-green-700 text-sm mb-2">
                üìß Ch√∫ng t√¥i ƒë√£ g·ª≠i email x√°c th·ª±c ƒë·∫øn <strong>{email}</strong>
              </p>
              <p className="text-green-600 text-sm mb-2">
                Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒë·∫øn (v√† c·∫£ th∆∞ m·ª•c spam) ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.
              </p>
              <p className="text-gray-600 text-xs mb-3">
                Sau khi x√°c th·ª±c email, b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng t·ª± ƒë·ªông v·ªÅ trang ch√≠nh.
              </p>
              <div className="flex gap-2">
                <button
                  onClick={() => router.push('/')}
                  className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg text-sm transition-colors"
                >
                  ƒêi ƒë·∫øn trang ch√≠nh
                </button>
                <p className="text-gray-500 text-xs py-2">
                  T·ª± ƒë·ªông chuy·ªÉn sau 5 gi√¢y...
                </p>
              </div>
            </div>
            <Link
              href="/login"
              className="mt-4 inline-block font-medium text-orange-600 hover:text-orange-500"
            >
              Quay l·∫°i ƒëƒÉng nh·∫≠p
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-red-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <div className="mx-auto h-16 w-auto flex items-center justify-center">
            <span className="text-4xl font-bold">
              <span className="text-orange-500">Easy</span>
              <span className="text-red-600">Fox</span>
            </span>
          </div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            T·∫°o t√†i kho·∫£n m·ªõi
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Ho·∫∑c{' '}
            <Link
              href="/login"
              className="font-medium text-orange-600 hover:text-orange-500"
            >
              ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c√≥ s·∫µn
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                H·ªç v√† t√™n
              </label>
              <input
                id="name"
                name="name"
                type="text"
                required
                className="mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                className="mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                M·∫≠t kh·∫©u
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="new-password"
                required
                className="mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          {error && (
            <div className="rounded-md bg-red-50 p-4">
              <div className="text-sm text-red-700">{error}</div>
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'ƒêang t·∫°o t√†i kho·∫£n...' : 'T·∫°o t√†i kho·∫£n'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}
