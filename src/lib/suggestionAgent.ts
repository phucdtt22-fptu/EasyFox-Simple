// TypeScript version of SuggestionAgent for Next.js API routes
import { ChatOpenAI } from "@langchain/openai";

interface User {
  id: string;
  business_name?: string;
  business_type?: string;
  target_audience?: string;
  notes?: string;
}

interface LastMessage {
  id?: string;
  question?: string;
  ai_response?: string;
}

interface BusinessContext {
  notes?: string;
}

interface SuggestionResult {
  success: boolean;
  suggestions: string[];
}

interface ContentBlock {
  text?: string;
  type?: string;
}

export class SuggestionAgent {
  private suggestionModel: ChatOpenAI;

  constructor() {
    // Debug environment variables trong Next.js runtime
    console.log('üîß SuggestionAgent constructor called');
    console.log('üåç Environment check:');
    console.log('   - NODE_ENV:', process.env.NODE_ENV);
    console.log('   - OPENAI_API_KEY available:', !!process.env.OPENAI_API_KEY);
    
    // ƒê·ªçc tr·ª±c ti·∫øp t·ª´ process.env
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    console.log('üîë API Keys check:');
    console.log('   - OPENAI_API_KEY:', openaiApiKey ? `${openaiApiKey.substring(0, 10)}...` : 'MISSING');
    
    if (!openaiApiKey) {
      console.error('‚ùå No OPENAI_API_KEY found in environment');
      throw new Error('Missing OPENAI_API_KEY environment variable');
    }

    console.log('‚úÖ Using OpenAI API key:', openaiApiKey.substring(0, 10) + '...');

    // Kh·ªüi t·∫°o model
    try {
      this.suggestionModel = new ChatOpenAI({
        modelName: process.env.OPENAI_SUGGESTION_MODEL || "gpt-3.5-turbo",
        temperature: 0.5,
        openAIApiKey: openaiApiKey,
      });
      
      console.log('üéØ SuggestionAgent initialized successfully with OpenAI');
    } catch (modelError) {
      console.error('‚ùå Failed to initialize ChatOpenAI:', modelError);
      throw modelError;
    }
  }

  // Main method to generate suggestions
  async generateSuggestions(userInfo: User, lastMessage: LastMessage | null, businessContext: BusinessContext | null = null): Promise<SuggestionResult> {
    console.log('üé® ==> STARTING AI-POWERED SUGGESTION GENERATION <==');
    console.log('üìä Input parameters:', {
      userInfo: !!userInfo,
      lastMessage: !!lastMessage,
      businessContext: !!businessContext,
      lastMessageId: lastMessage?.id,
      lastQuestion: lastMessage?.question?.substring(0, 100) + '...'
    });
    
    try {
      // Detect business type for more targeted suggestions
      const businessType = this.detectBusinessType(businessContext?.notes);
      
      // Create focused suggestion prompt
      const suggestionPrompt = `B·∫°n l√† AI assistant t·∫°o g·ª£i √Ω cho EasyFox Marketing Platform. 

CONTEXT:
- Onboarding: ${businessContext?.notes ? 'COMPLETED' : 'NOT COMPLETED'}
- Business Type: ${businessType}
${businessContext?.notes ? `- Business Info: ${businessContext.notes}` : ''}

TIN NH·∫ÆN CU·ªêI C√ôNG:
${lastMessage?.question ? `User: ${lastMessage.question}` : 'Ch∆∞a c√≥ tin nh·∫Øn'}
${lastMessage?.ai_response ? `AI: ${lastMessage.ai_response}` : ''}

NHI·ªÜM V·ª§: 
Ph√¢n t√≠ch tin nh·∫Øn cu·ªëi c√πng c·ªßa AI v√† t·∫°o 4 g·ª£i √Ω ng·∫Øn g·ªçn (8-15 t·ª´) cho nh·ªØng g√¨ USER c√≥ th·ªÉ TR·∫¢ L·ªúI l·∫°i.

QUAN TR·ªåNG: 
- N·∫øu AI v·ª´a h·ªèi m·ªôt c√¢u h·ªèi ‚Üí t·∫°o g·ª£i √Ω tr·∫£ l·ªùi cho c√¢u h·ªèi ƒë√≥
- N·∫øu AI v·ª´a ch√†o h·ªèi ‚Üí t·∫°o g·ª£i √Ω c√°ch user c√≥ th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán
- N·∫øu AI v·ª´a ƒë∆∞a ra th√¥ng tin ‚Üí t·∫°o g·ª£i √Ω c√¢u h·ªèi ti·∫øp theo ho·∫∑c ph·∫£n h·ªìi
- Lu√¥n ƒë√≥ng vai KH√ÅCH H√ÄNG tr·∫£ l·ªùi AI, kh√¥ng ph·∫£i AI h·ªèi kh√°ch h√†ng

Ch·ªâ tr·∫£ v·ªÅ JSON array ƒë∆°n gi·∫£n, kh√¥ng th√™m text hay gi·∫£i th√≠ch g√¨ kh√°c.

V√ç D·ª§ FORMAT:
["T√¥i mu·ªën t·∫°o chi·∫øn d·ªãch marketing m·ªõi", "H√£y xem c√°c chi·∫øn d·ªãch hi·ªán t·∫°i", "Gi√∫p t√¥i l√™n l·ªãch ƒëƒÉng b√†i", "T∆∞ v·∫•n t·ªëi ∆∞u h√≥a n·ªôi dung"]

Ch·ªâ tr·∫£ v·ªÅ JSON array nh∆∞ v√≠ d·ª• tr√™n, kh√¥ng c√≥ text n√†o kh√°c!`;

      console.log('üìù Suggestion context:');
      console.log(`   - Onboarding: ${businessContext?.notes ? 'YES' : 'NO'}`);
      console.log(`   - Business type: ${businessType}`);
      console.log(`   - Last message: ${lastMessage?.question ? 'YES' : 'NO'}`);

      console.log('üöÄ Calling OpenAI suggestion model...');
      console.log('üì§ Sending prompt to OpenAI API...');
      console.log('üîó Model endpoint will be called with temperature 0.5...');
      
      const startTime = Date.now();
      const result = await this.suggestionModel.invoke(suggestionPrompt);
      const endTime = Date.now();
      
      console.log(`‚è±Ô∏è OpenAI API call took ${endTime - startTime}ms`);
      console.log('üì• Received response from OpenAI API');
      
      // Handle different types of content
      const contentStr = typeof result.content === 'string' 
        ? result.content 
        : Array.isArray(result.content) 
          ? result.content.map(c => typeof c === 'string' ? c : (c as ContentBlock).text || '').join(' ')
          : '';
      
      console.log('üîç Raw suggestion response length:', contentStr.length);
      console.log('üîç Raw suggestion response preview:', contentStr.substring(0, 300) + '...');
      
      if (!contentStr || contentStr.length === 0) {
        console.log('‚ö†Ô∏è Empty response from OpenAI API');
        return this.getFallbackSuggestions(!!businessContext?.notes);
      }
      
      console.log('üìù Processing response text...');
      
      // Th·ª≠ parse JSON tr∆∞·ªõc
      let suggestions: string[] = [];
      
      try {
        // T√¨m JSON array trong response
        const jsonMatch = contentStr.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          const jsonStr = jsonMatch[0];
          console.log('ÔøΩ Found JSON in response:', jsonStr);
          
          const parsed = JSON.parse(jsonStr);
          if (Array.isArray(parsed)) {
            suggestions = parsed.filter(s => typeof s === 'string' && s.length > 0);
            console.log(`‚úÖ Successfully parsed ${suggestions.length} suggestions from JSON`);
          }
        }
      } catch (jsonError) {
        console.log('‚ö†Ô∏è Failed to parse JSON, trying text parsing...', jsonError instanceof Error ? jsonError.message : 'Unknown error');
      }
      
      // Fallback: Parse text format n·∫øu JSON kh√¥ng ho·∫°t ƒë·ªông
      if (suggestions.length === 0) {
        const responseText = contentStr.trim();
        const lines = responseText.split('\n');
        console.log(`üìã Found ${lines.length} lines in response`);
        
        // Format 1: Lines b·∫Øt ƒë·∫ßu v·ªõi "-"
        suggestions = lines
          .filter((line: string) => line.trim().startsWith('-'))
          .map((line: string) => line.trim().substring(1).trim())
          .filter((suggestion: string) => suggestion.length > 0);
        
        console.log(`üéØ Found ${suggestions.length} suggestions with "-" format`);
        
        // Format 2: N·∫øu kh√¥ng c√≥ "-", th·ª≠ t√¨m lines c√≥ n·ªôi dung
        if (suggestions.length === 0) {
          suggestions = lines
            .filter((line: string) => {
              const trimmed = line.trim();
              return trimmed.length > 10 && 
                     !trimmed.toLowerCase().includes('g·ª£i √Ω') &&
                     !trimmed.toLowerCase().includes('nhi·ªám v·ª•') &&
                     !trimmed.toLowerCase().includes('context');
            })
            .map((line: string) => line.trim())
            .slice(0, 4); // Ch·ªâ l·∫•y t·ªëi ƒëa 4 suggestions
          
          console.log(`üéØ Found ${suggestions.length} suggestions with content filtering`);
        }
        
        // Format 3: N·∫øu v·∫´n kh√¥ng c√≥, th·ª≠ split b·∫±ng s·ªë
        if (suggestions.length === 0) {
          const numbered = responseText.match(/\d+\.\s*(.+)/g);
          if (numbered) {
            suggestions = numbered.map(s => s.replace(/\d+\.\s*/, '').trim());
            console.log(`üéØ Found ${suggestions.length} suggestions with numbered format`);
          }
        }
      }

      if (suggestions.length > 0) {
        console.log(`‚úÖ Generated ${suggestions.length} suggestions:`);
        suggestions.forEach((s: string, i: number) => {
          console.log(`   ${i+1}. "${s}"`);
        });
        
        return {
          success: true,
          suggestions: suggestions
        };
      } else {
        console.log('‚ö†Ô∏è No valid suggestions found, generating fallback');
        return this.getFallbackSuggestions(!!businessContext?.notes);
      }

    } catch (error) {
      console.error('‚ùå Error generating suggestions:', error);
      
      // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
      if (error instanceof Error) {
        console.error('‚ùå Error message:', error.message);
        console.error('‚ùå Error stack:', error.stack);
      }
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói API key kh√¥ng
      if (error instanceof Error && error.message.includes('API key')) {
        console.error('üîë API Key error detected');
      }
      
      console.log('üîÑ Falling back to default suggestions');
      return this.getFallbackSuggestions(!!businessContext?.notes);
    }
  }

  // Fallback suggestions when AI fails
  private getFallbackSuggestions(hasOnboarding: boolean): SuggestionResult {
    const fallbackSuggestions = hasOnboarding ? [
      "T√¥i mu·ªën t·∫°o chi·∫øn d·ªãch m·ªõi",
      "Xem chi·∫øn d·ªãch hi·ªán t·∫°i", 
      "Gi√∫p l√™n l·ªãch ƒëƒÉng b√†i",
      "T∆∞ v·∫•n t·ªëi ∆∞u n·ªôi dung"
    ] : [
      "T√¥i c·∫ßn thi·∫øt l·∫≠p doanh nghi·ªáp",
      "H∆∞·ªõng d·∫´n t√¥i b·∫Øt ƒë·∫ßu",
      "EasyFox c√≥ g√¨ hay ho?",
      "T·∫°o chi·∫øn d·ªãch ƒë·∫ßu ti√™n"
    ];

    return {
      success: true,
      suggestions: fallbackSuggestions
    };
  }

  // Helper method to detect business type
  private detectBusinessType(onboardingNotes?: string): string {
    if (!onboardingNotes) return 'unknown';
    
    const notes = onboardingNotes.toLowerCase();
    
    if (notes.includes('qu√°n c√† ph√™') || notes.includes('caf√©') || notes.includes('coffee')) {
      return 'coffee_shop';
    }
    if (notes.includes('ti·ªám nail') || notes.includes('nail salon') || notes.includes('l√†m nail')) {
      return 'nail_salon';
    }
    if (notes.includes('nh√† h√†ng') || notes.includes('restaurant') || notes.includes('ƒÉn u·ªëng')) {
      return 'restaurant';
    }
    if (notes.includes('spa') || notes.includes('massage') || notes.includes('th·∫©m m·ªπ')) {
      return 'spa';
    }
    if (notes.includes('shop') || notes.includes('c·ª≠a h√†ng') || notes.includes('b√°n h√†ng')) {
      return 'retail';
    }
    
    return 'general_business';
  }
}
