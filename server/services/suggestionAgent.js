const { ChatOpenAI } = require("@langchain/openai");
const { HumanMessage } = require("@langchain/core/messages");

class SuggestionAgent {
  constructor() {
    // Ki·ªÉm tra API key tr∆∞·ªõc khi kh·ªüi t·∫°o
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      console.error('‚ùå Missing OPENAI_API_KEY environment variable');
      throw new Error('Missing OPENAI_API_KEY environment variable');
    }

    // S·ª≠ d·ª•ng model nh·∫π h∆°n cho suggestions
    this.suggestionModel = new ChatOpenAI({
      model: process.env.OPENAI_SUGGESTION_MODEL || "gpt-3.5-turbo",
      temperature: 0.5,
      apiKey: apiKey,
    });
    
    console.log('üéØ SuggestionAgent initialized with model:', process.env.OPENAI_SUGGESTION_MODEL || "gpt-3.5-turbo");
    console.log('üîë API key configured:', apiKey ? `${apiKey.substring(0, 10)}...` : 'MISSING');
  }

  // Main method to generate suggestions
  async generateSuggestions(userInfo, lastMessage, businessContext = null) {
    console.log('üé® Generating AI-powered suggestions...');
    
    try {
      // Detect business type for more targeted suggestions
      const businessType = this.detectBusinessType(businessContext?.notes);
      
      // Create focused suggestion prompt
      const suggestionPrompt = `B·∫°n l√† AI assistant t·∫°o g·ª£i √Ω cho EasyFox Marketing Platform. 

CONTEXT:
- Onboarding: ${businessContext?.notes ? 'COMPLETED' : 'NOT COMPLETED'}
- Business Type: ${businessType}
${businessContext?.notes ? `- Business Info: ${businessContext.notes}` : ''}

TIN NH·∫ÆN CU·ªêI C√ôNG:
${lastMessage?.question ? `User: ${lastMessage.question}` : 'Ch∆∞a c√≥ tin nh·∫Øn'}
${lastMessage?.ai_response ? `AI: ${lastMessage.ai_response}` : ''}

NHI·ªÜM V·ª§: 
Ph√¢n t√≠ch tin nh·∫Øn cu·ªëi c√πng c·ªßa AI v√† t·∫°o 4 g·ª£i √Ω ng·∫Øn g·ªçn (8-15 t·ª´) cho nh·ªØng g√¨ USER c√≥ th·ªÉ TR·∫¢ L·ªúI l·∫°i.

QUAN TR·ªåNG: 
- N·∫øu AI v·ª´a h·ªèi m·ªôt c√¢u h·ªèi ‚Üí t·∫°o g·ª£i √Ω tr·∫£ l·ªùi cho c√¢u h·ªèi ƒë√≥
- N·∫øu AI v·ª´a ch√†o h·ªèi ‚Üí t·∫°o g·ª£i √Ω c√°ch user c√≥ th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán
- N·∫øu AI v·ª´a ƒë∆∞a ra th√¥ng tin ‚Üí t·∫°o g·ª£i √Ω c√¢u h·ªèi ti·∫øp theo ho·∫∑c ph·∫£n h·ªìi
- Lu√¥n ƒë√≥ng vai KH√ÅCH H√ÄNG tr·∫£ l·ªùi AI, kh√¥ng ph·∫£i AI h·ªèi kh√°ch h√†ng

Ch·ªâ tr·∫£ v·ªÅ JSON array ƒë∆°n gi·∫£n, kh√¥ng th√™m text hay gi·∫£i th√≠ch g√¨ kh√°c.

V√ç D·ª§ FORMAT:
["T√¥i mu·ªën t·∫°o chi·∫øn d·ªãch m·ªõi", "Xem chi·∫øn d·ªãch hi·ªán t·∫°i", "Gi√∫p l√™n l·ªãch ƒëƒÉng b√†i", "T∆∞ v·∫•n t·ªëi ∆∞u n·ªôi dung"]

Ch·ªâ tr·∫£ v·ªÅ JSON array nh∆∞ v√≠ d·ª• tr√™n, kh√¥ng c√≥ text n√†o kh√°c!`;

      console.log('üìù Suggestion context:');
      console.log(`   - Onboarding: ${businessContext?.notes ? 'YES' : 'NO'}`);
      console.log(`   - Business type: ${businessType}`);
      console.log(`   - Last message: ${lastMessage?.question ? 'YES' : 'NO'}`);

      console.log('üöÄ Calling OpenAI suggestion model...');
      
      // Fix: Use invoke with proper HumanMessage for ChatOpenAI
      const result = await this.suggestionModel.invoke([
        new HumanMessage(suggestionPrompt)
      ]);
      
      console.log('üîç Raw suggestion response:', result.content.substring(0, 200) + '...');
      
      // Th·ª≠ parse JSON tr∆∞·ªõc
      let suggestions = [];
      
      try {
        // T√¨m JSON array trong response
        const jsonMatch = result.content.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          const jsonStr = jsonMatch[0];
          console.log('üîç Found JSON in response:', jsonStr);
          
          const parsed = JSON.parse(jsonStr);
          if (Array.isArray(parsed)) {
            suggestions = parsed.filter(s => typeof s === 'string' && s.length > 0);
            console.log(`‚úÖ Successfully parsed ${suggestions.length} suggestions from JSON`);
          }
        }
      } catch (jsonError) {
        console.log('‚ö†Ô∏è Failed to parse JSON, trying text parsing...');
      }
      
      // Fallback: Parse text format n·∫øu JSON kh√¥ng ho·∫°t ƒë·ªông
      if (suggestions.length === 0) {
        // Parse plain text response v·ªõi bullet points
        const responseText = result.content.trim();
        const lines = responseText.split('\n');
        suggestions = lines
          .filter((line) => line.trim().startsWith('-'))
          .map((line) => line.trim().substring(1).trim())
          .filter((suggestion) => suggestion.length > 0);
      }

      if (suggestions.length > 0) {
        console.log(`‚úÖ Generated ${suggestions.length} suggestions:`);
        suggestions.forEach((s, i) => {
          console.log(`   ${i+1}. "${s}"`);
        });
        
        return {
          success: true,
          suggestions: suggestions
        };
      } else {
        console.log('‚ö†Ô∏è No valid suggestions found, generating fallback');
        return this.getFallbackSuggestions(businessContext?.notes);
      }

    } catch (error) {
      console.error('‚ùå Error generating suggestions:', error);
      
      // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
      if (error instanceof Error) {
        console.error('‚ùå Error message:', error.message);
        console.error('‚ùå Error stack:', error.stack);
      }
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói API key kh√¥ng
      if (error instanceof Error && error.message.includes('API key')) {
        console.error('üîë API Key error detected');
      }
      
      console.log('üîÑ Falling back to default suggestions');
      return this.getFallbackSuggestions(businessContext?.notes);
    }
  }

  // Fallback suggestions when AI fails
  getFallbackSuggestions(hasOnboarding) {
    const fallbackSuggestions = hasOnboarding ? [
      "T√¥i mu·ªën t·∫°o chi·∫øn d·ªãch m·ªõi",
      "Xem chi·∫øn d·ªãch hi·ªán t·∫°i", 
      "Gi√∫p l√™n l·ªãch ƒëƒÉng b√†i",
      "T∆∞ v·∫•n t·ªëi ∆∞u n·ªôi dung"
    ] : [
      "T√¥i c·∫ßn thi·∫øt l·∫≠p doanh nghi·ªáp",
      "H∆∞·ªõng d·∫´n t√¥i b·∫Øt ƒë·∫ßu",
      "EasyFox c√≥ g√¨ hay ho?",
      "T·∫°o chi·∫øn d·ªãch ƒë·∫ßu ti√™n"
    ];

    return {
      success: true,
      suggestions: fallbackSuggestions
    };
  }

  // Helper method to detect business type
  detectBusinessType(onboardingNotes) {
    if (!onboardingNotes) return 'unknown';
    
    const notes = onboardingNotes.toLowerCase();
    
    if (notes.includes('qu√°n c√† ph√™') || notes.includes('caf√©') || notes.includes('coffee')) {
      return 'coffee_shop';
    }
    if (notes.includes('ti·ªám nail') || notes.includes('nail salon') || notes.includes('l√†m nail')) {
      return 'nail_salon';
    }
    if (notes.includes('nh√† h√†ng') || notes.includes('restaurant') || notes.includes('ƒÉn u·ªëng')) {
      return 'restaurant';
    }
    if (notes.includes('spa') || notes.includes('massage') || notes.includes('th·∫©m m·ªπ')) {
      return 'spa';
    }
    if (notes.includes('shop') || notes.includes('c·ª≠a h√†ng') || notes.includes('b√°n h√†ng')) {
      return 'retail';
    }
    
    return 'general_business';
  }
}

module.exports = SuggestionAgent;
